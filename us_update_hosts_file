#!/usr/bin/perl -w

# Update the /etc/hosts file to include all of the IP address in the piped input.

##########################################
# Configuration
##########################################

use Getopt::Std;

my $usage = '

Usage:
	'.$0.' [-h] [-i ip-address] [-y|-n] <hostname list>

	-h  Display this help.
	-i  The IP address of the testing host to add to the /etc/hosts file.
	-y  Apply changes to /etc/hosts without prompting.
	-n  Skip changes to /etc/hosts without prompting.
	
	<hostname list>  A list of host names, one per line in files or piped to STDIN.
	
Configuration:
	A configuration file named .under_siege can be placed in the current directory or 
	in your home directory, or configuration can be put at /etc/under_siege. 
	Command-line arguments can be used to override config entries.
	
	$IP         (string) The IP address of the test web host. Will be added to the
	                     /etc/hosts file for each hostname in the test file.
	                     Example: $IP = \'140.233.4.221\';
	                     
	$YES_FOR_ALL (int)   If nil or 0, you will be prompted for all /etc/hosts changes.
	                     If 1, all /etc/hosts changes will be applied without prompt.
	                     If -1, all /etc/hosts changes will be skipped without prompt.

';

our($opt_h, $opt_y, $opt_n, $opt_i);
getopts ('hyni:');

if ($opt_h) {
	print STDERR $usage;
	exit 1;
}

# Load our configs.
do "/etc/under_siege";
do "$ENV{HOME}/.under_siege";
do ".under_siege";

if ($opt_y) {
	$YES_FOR_ALL = 1;
}
if ($opt_n) {
	$YES_FOR_ALL = -1;
}
if (!defined($YES_FOR_ALL)) {
	$YES_FOR_ALL = 0;
}

if (defined($opt_i) && $opt_i =~ /.+/) {
	$IP = $opt_i;
}
if (!defined($IP)) {
	print STDERR "\$IP was not defined in the config or passed as an argument.";
	print STDERR $usage;
	exit(3);
}

##########################################
# Execution
##########################################

use Tie::File;

my $ipRegex = "^".$IP;
$ipRegex =~ s/\./\\./g;

sub in_array
 {
     my ($arr,$search_for) = @_;
     my %items = map {$_ => 1} @$arr;
     return (exists($items{$search_for}))?1:0;
 }
 
sub prompt_user {
  my($prompt, $default) = @_;
  my $defaultValue = $default ? "[$default]" : "";
  open TTY, '<', '/dev/tty';
  print "$prompt $defaultValue: ";
  chomp(my $input = <TTY>);
  close TTY;
  return $input ? $input : $default;
}

# If we aren't going to modify /etc/hosts, just open it as read-only
if ($YES_FOR_ALL == -1) {
	use Fcntl 'O_RDONLY';
	tie @hostsFile, 'Tie::File', '/etc/hosts', mode => O_RDONLY or die "Couldn't open /etc/hosts";
} else {
	tie @hostsFile, 'Tie::File', '/etc/hosts' or die "Couldn't open /etc/hosts";
}

# Find the start of our host list, ignoring any hosts listed before.
foreach my $i (0..$#hostsFile) {
	if ($hostsFile[$i] =~ /# under siege hosts/) {
		$hostMarker = $i;
	}
}
if (!defined($hostMarker)) {
	$hostMarker = scalar(@hostsFile);
	push(@hostsFile, "# under siege hosts");
}

my @hosts = ();
while (<>) {
	my $host = $_;
	$host =~ s/\n//;
	if ($host =~ /^[a-z0-9\.]+$/) {
		push(@hosts, $host);
	}
}

# Add or update hosts
foreach $host (@hosts) {
	my $hostRegex = $host;
	my $found = 0;
	$hostRegex =~ s/\./\\./g;
# 	print "`$hostRegex`\n";
	foreach my $j (($hostMarker + 1)..$#hostsFile) {
		if ($hostsFile[$j] =~ /$hostRegex/) {
			$found = 1;
			
			# check IP
			if ($hostsFile[$j] !~ /$ipRegex/) {
				if ($YES_FOR_ALL == 0) {
					$update = prompt_user("Update IP to `$IP	$host` in /etc/hosts? (y/n)", 'y');
				} elsif ($YES_FOR_ALL < 0) {
					print "Update IP to `$IP	$host` in /etc/hosts? (y/n): n\n";
					$update = 'n';
				}
				if ($YES_FOR_ALL > 0 || $update =~ /^y/) {
					$hostsFile[$j] = "$IP	$host";
					print STDERR "Updated IP to `$IP	$host` in /etc/hosts\n";
				}
			}
			last;
		}
	}
	
	# Add
	if (!$found) {
		if ($YES_FOR_ALL == 0) {
			$update = prompt_user("Add `$IP	$host` to /etc/hosts? (y/n)", 'y');
		} elsif ($YES_FOR_ALL < 0) {
			print "Add `$IP	$host` to /etc/hosts? (y/n): n\n";
			$update = 'n';
		}
		if ($YES_FOR_ALL > 0 || $update =~ /^y/) {
			push(@hostsFile, "$IP	$host");
			print STDERR "Added `$IP	$host` to /etc/hosts\n";
		}
	}
}

# Remove unneeded hosts
my $j = $hostMarker + 1;
while ($j < scalar(@hostsFile)) {
	if ($hostsFile[$j] =~ /^[0-9\.]+\s+([a-z0-9\.]+)$/) {
		if (in_array(\@hosts, $1)) {
			$j++;
		} else {
			if ($YES_FOR_ALL == 0) {
				$update = prompt_user("Remove `".$hostsFile[$j]."` from /etc/hosts? (y/n)", 'y');
			} elsif ($YES_FOR_ALL < 0) {
				print "Remove `".$hostsFile[$j]."` from /etc/hosts? (y/n): n\n";
				$update = 'n';
			}
			if ($YES_FOR_ALL > 0 || $update =~ /^y/) {
				print STDERR "Removed `".$hostsFile[$j]."` from /etc/hosts\n";
				splice(@hostsFile, $j, 1);
			} else {
				$j++;
			}
			
		}
	} else {
		$j++;
	}
}

untie @hostsFile

